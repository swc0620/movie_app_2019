{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"uSAiCeA,MA3Bf,YAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,iBACTD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAIC,IAAKD,EAAOL,UAAU,iBAAiBI,OAGnD,uBAAGJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAE,KAA/C,UCuDDC,G,iNAnEbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAeVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,4DALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAQZ,EAAKM,SAAS,CAACN,SAAQD,WAAW,IAXxB,2C,mFAeVQ,KAAKN,c,+BAOE,IAAD,EACsBM,KAAKT,MAA1BC,EADD,EACCA,UAAWC,EADZ,EACYA,OAClB,OACA,6BAASX,UAAU,aAChBU,EACI,yBAAKV,UAAU,UACd,0BAAMA,UAAU,eAAhB,iBAED,yBAAKA,UAAU,UACbW,EAAOR,KAAI,SAAAgB,GAAK,OACf,kBAAC,EAAD,CACEb,IAAKa,EAAMzB,GACXA,GAAIyB,EAAMzB,GACVC,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAMC,mBACdrB,OAAQoB,EAAMpB,kB,GAzDZsB,IAAMC,YCIxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,a","file":"static/js/main.ae443270.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// If a component doesn't need 'state', it doens't have to be class component\r\n// <h3 class=\"movie_title\" style={{backgroundColor: \"red\"}}>{title}</h3> : CSS on top of JavaScript\r\n// 'map' method gives you the index, which is a index of current item. We can use this as a key\r\nfunction Movie({id, year, title, summary, poster, genres}){\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title} />\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"movie__genres\">\r\n                    {genres.map((genre, index) => (\r\n                        <li key={index} className=\"genres__genre\">{genre}</li>\r\n                    ))}\r\n                </ul>\r\n                <p className=\"movie__summary\">{summary.slice(0,140)}...</p>\r\n            </div>\r\n        </div>\r\n    );    \r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n}\r\n\r\nexport default Movie;","import React from 'react';\nimport axios from \"axios\";\nimport Movie from './Movie.js';\nimport \"./Movie.css\";\n\nclass App extends React.Component{\n  state = {\n    isLoading: true,\n    movies: [],\n    /* Declaring your 'state' in the future in advance is not required.\n    But it is a good practice to plan it in advance.\n    */\n    // book: true\n  };\n\n  // Way 1\n  /*\n  async componentDidMount() {\n    const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n  };\n  */\n\n  // Way 2\n  getMovies = async () => {\n    const {\n      data : {\n        data : {movies}\n      }\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    // first 'movies' is the one in the 'state', second 'moives' is the one from 'axios' \n    /*\n    this.setState({movies: movies}, isLoading: false);\n    */\n   // But because they share same name, we can make a shortcut because javascript is not stupid and understands them\n    this.setState({movies, isLoading: false});\n  };\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  /* The code below looks exactly like HTML, but it is JSX/JavaScript\n  Therefore, istead of using 'class' we need to use 'className' in order to avoid confusion*/\n  /* Similarly, 'label' in HTML has 'for', which is actually a loop in JSX/JavaScript.\n  Therefore, we need to use 'htmlFor' instead of 'for'*/\n  render(){\n    const {isLoading, movies} = this.state;\n    return ( \n    <section className=\"container\">\n      {isLoading \n        ? (<div className=\"loader\">\n            <span className=\"loader_text\">\"Loading...\"</span>\n          </div>)\n        : (<div className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key={movie.id} \n                id={movie.id} \n                year={movie.year} \n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}  \n              />))\n            }\n          </div>\n        )}\n    </section>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import App_1 from './App_1';\n// import App_2 from './App_2';\nimport App from './App';\n\n// <App /> is a 'component'. A component is a function that returns HTML.\n// JSX is a Javascript, inside of which is HTML.\n// ReactDOM.render(<App />, document.getElementById('potato'));\nReactDOM.render(<App />, document.getElementById('potato'));"],"sourceRoot":""}